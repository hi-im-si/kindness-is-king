///*----------------------------------*\
//  #BUTTONS
//\*----------------------------------*/
//
//  1.  Allow us to style box model properties.
//  2.  Reset/normalize some styles.
//  3.  Line different sized buttons up a little nicer.
//  4.  Stop buttons wrapping and looking broken.
//  5.  Make buttons inherit font styles (often necessary when styling `input`s as buttons).
//  6.  Force all button-styled elements to appear clickable.
//  7.  Dont allow buttons to have underlines; it kinda ruins the illusion.
//
//\*----------------------------------*/
/* stylelint-disable no-duplicate-selectors */

//  Usage:
//
//  <a href="" class="c-btn"><span>Button</span></a>
//
//  <a href="" class="c-btn  c-btn--primary | c-btn--secondary"><span>Button</span></a>
//
//  <a href="" class="c-btn  c-btn--sml | c-btn--med | c-btn--lrg"><span>Button</span></a>
//
//  <a href="" class="c-btn  c-btn--narrow | c-btn--wide"><span>Button</span></a>
//
//  <a href="" class="c-btn  c-btn--inactive"><span>Button</span></a>

.c-btn {
    position: relative; /* [1] */
    display: inline-flex; /* [1] */
    align-items: center; /* [1] */
    justify-content: center; /* [2] */
    margin: 0; /* [2] */
    padding: 0; /* [2] */
    border: none; /* [2] */
    border-radius: 0; /* [2] */
    font: inherit; /* [5] */
    text-align: center; /* [2] */
    white-space: nowrap; /* [4] */
    cursor: pointer; /* [6] */
}

.c-btn {

    &,
    &:hover {
        text-decoration: none; /* [7] */
        transition: all 0.5s $ease-in-out;
    }

    &:active,
    &:focus {
        outline: none;
    }

    &::before {
        content: "";
        @include _position(absolute, 0, 0, 0, 0, -1);
        width: 100%;
        height: 100%;
        transition: 0.3s $ease-in-out transform;
    }
}

/*------------------------------------*\
	$SIZES
\*------------------------------------*/
/**
 *  Button size modifiers.
 *
 *  Sizes to be set based on variables inherited from your main font sizes
 *  Button heights are calculated from our spacing units
 */

$btn-size: $size-zeta;
$btn-size-lh: strip-unit($global-spacing);

$sizes: (
    sml: (
        font-size: $btn-size,
        line-height: strip-unit($global-spacing-s * 2)
    ),
    med: (
        font-size: $btn-size,
        line-height: strip-unit($global-spacing)
    ),
    lrg: (
        font-size: $btn-size,
        line-height: strip-unit($global-spacing-s * 2)
    )
);

.c-btn {
    padding-right: $global-spacing-m;
    padding-left: $global-spacing-m;
    @include font-size($btn-size, $btn-size-lh);

    /**
    * Button length modifiers.
    *
    * Modify the length of the buttons by increasing|decreasing padding
    *  1. Remove padding so that widths and paddings dont conflict.
    */

    &--narrow {
        padding-right: $global-spacing-s;
        padding-left: $global-spacing-s;
    }

    &--wide {
        padding-right: $global-spacing-m;
        padding-left: $global-spacing-m;
    }

    // These buttons will fill the entirety of their container.
    &--full {
        width: 100%;
        padding-right: 0; /* [1] */
        padding-left: 0; /* [1] */
        text-align: center;
    }

    // These buttons will fill half of their container.
    &--half {
        width: 50%;
        padding-right: 0; /* [1] */
        padding-left: 0; /* [1] */
        text-align: center;
    }

    @each $class, $size in $sizes {
        /**
        * Modifier: #{$class} size
        */

        &--#{$class} {
            @include font-size(map-get($size, font-size), map-get($size, line-height));
        }

        /**
        * Modifier: Objects(square|circle) #{$class} size
        */

        &--object--#{$class} {
            width: #{map-get($size, line-height) + 2}px;
            height: #{map-get($size, line-height) + 2}px;
        }
    }

    /* Button with aligned icon */

    &__icon {
        position: relative;
    }
}

/*------------------------------------*\
	$FUNCTIONS
\*------------------------------------*/
/**
 * Button function modifiers for Colour Skinning.
 ------- colours have been extended in theme.scss for hierarchical button classes
 */

$properties: (
    primary: (
        background-color: $colour-primary,
        background-color-active: $colour-secondary,
        border-width: 0px,
        border-color: transparent,
        border-color-active: transparent,
        color: $colour-secondary,
        color-active: $colour-primary,
        font-family: $font-primary
    ),
    secondary: (
        background-color: $colour-primary,
        background-color-active: $colour-secondary,
        border-width: 1px,
        border-color: $colour-primary,
        border-color-active: $colour-primary,
        color: $colour-tertiary,
        color-active: $colour-primary,
        font-family: $font-primary
    )
);

.c-btn {
    /* postcss-bem-linter: ignore */
    > span {
        position: relative;
        @include z-index(button);
    }

    &::before {
        z-index: 0;
        transform: scale(0)
    }

    &.is-active,
    &:hover {
        &::before {
            transform: scale(1);
        }
    }

    @each $class, $property in $properties {
        $bg-color: map-get($property, background-color);
        $bg-color-active: map-get($property, background-color-active);
        $border-width: map-get($property, border-width);
        $border-color: map-get($property, border-color);
        $border-color-active: map-get($property, border-color-active);
        $text-color: map-get($property, color);
        $text-color-active: map-get($property, color-active);
        $font-family: map-get($property, font-family);

        &--#{$class} {
            background-color: $bg-color;
            background-image: none;
            background-repeat: repeat;
            background-position: 0 0;

            @if $border-width >= 1 {
                border-width: $border-width;
                border-style: solid;
                border-color: $border-color;
            }

            color: $text-color;
            font-family: $font-family;
            font-weight: $weight-bolder;

            &::before {
                background-color: $bg-color-active;
            }

            &.is-active,
            &:hover {
                border-color: $border-color-active;
                color: $text-color-active;
            }
        }
    }
}

/**
 * Inactive, disabled buttons.
 *
 * 1. Inform the user that this button is disabled/inactive by applying an alternative theme/cursor when hovered.
 */

.c-btn {
    &--inactive {
        &,
        &:hover,
        &:active,
        &:focus {
            background-color: $colour-disabled; /* [1] */
            color: darken($colour-disabled, 10%); /* [1] */
            cursor: not-allowed; /* [1] */
        }
    }
}
